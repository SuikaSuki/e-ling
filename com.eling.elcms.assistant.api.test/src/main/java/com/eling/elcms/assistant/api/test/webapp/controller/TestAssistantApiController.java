package com.eling.elcms.assistant.api.test.webapp.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.eling.elcms.assistant.api.model.AssistantInfo;
import com.eling.elcms.assistant.api.model.view.Assistant;
import com.eling.elcms.assistant.api.model.view.AssistantSos;
import com.eling.elcms.assistant.api.model.view.AssistantVoice;
import com.eling.elcms.assistant.api.service.AssistantSender;
import com.eling.elcms.assistant.api.service.IAssistantManager;
import com.eling.elcms.assistant.api.util.DateUtils;


/**
 * http调用服务
 * @author swq
 *
 */
@Controller
public class TestAssistantApiController {
	public static Map<String, String> voiceMap = new HashMap<String,String>(){
		private static final long serialVersionUID = -4680836211456310307L;

	{
		put("1","");
		put("2","");
		put("3","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");
		put("4","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");
		put("5","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");

	}};
	static int i = 0;
	@Autowired 
	private AssistantSender assistantSender;
	@Autowired 
	private IAssistantManager assistantManager;

	/**
	 * 立即定位(测试用)
	 * @param imei
	 * @return
	 */
	@RequestMapping("/test/locationNow")
    @ResponseBody
    public String locationNow(@RequestParam(value="imei")  String imei) {  
		return  assistantSender.callApi("IWBP16,"+imei+",080835", imei);
		
    }
	/**
	 * 取得所有定位信息IWAP01(测试用)
	 * @param imei
	 * @return
	 */
	@RequestMapping("/test/getLocations")
    @ResponseBody
    public List<AssistantInfo> getLocations(@RequestParam(value="imei")  String imei) {  
		return  assistantManager.getLocations(imei);
		
    }
	/**
	 * 取得所有计步IWAP03(测试用)
	 * @param imei
	 * @return
	 */
	@RequestMapping("/test/getSteps")
    @ResponseBody
    public List<AssistantInfo> getSteps(@RequestParam(value="imei")  String imei) {  
		return  assistantManager.getSteps(imei);
		
    }
	/**
	 * 取得所有定位信息IWAP01(测试用)
	 * @param imei
	 * @return
	 */
	@RequestMapping("/test/reset")
    @ResponseBody
    public boolean reset(@RequestParam(value="imei")  String imei) {  
		return  assistantManager.reset(imei);
		
    }
	/**
	 * 取得所有在线的助手imei号(测试用)
	 * @return
	 */
	@RequestMapping("/test/getAllImei")
    @ResponseBody
    public List<Assistant> getAllImei() { 
		String imei = assistantSender.getAllImei();
		List<Assistant> assistants = new ArrayList<Assistant>();
		if(StringUtils.isNotBlank(imei)){
			String [] imeis = imei.split(",");
			for (int i = 0; i < imeis.length; i++) {
				Assistant assistant = new Assistant();
				assistant.setImei(imeis[i]);
				assistants.add(assistant);
			}
		}
		/*Assistant assistant = new Assistant();
		assistant.setImei("111111111");
		assistants.add(assistant);*/
		//System.out.println(AssistantSender.socketUrl);
		return assistants;
    }
	/**
	 * 设置sos(测试用)
	 * @return
	 */
	@RequestMapping("/test/setSos")
    @ResponseBody
    public List<AssistantSos> setSos(@RequestParam(value="imei")  String imei,
    		@RequestParam(value="phone")  String phone) {  
		
		assistantManager.setSosPhone(imei, phone);
		List<AssistantSos> sosList = new ArrayList<AssistantSos>();
		List<String> phones = assistantManager.getSosPhone(imei);
		for (int i = 0; i < phones.size(); i++) {
			AssistantSos sos = new AssistantSos();
			sos.setPhone(phones.get(i));
			sosList.add(sos);
		}
		
		return sosList;
		
    }
	/**
	 * 删除sos(测试用)
	 * @return
	 */
	@RequestMapping("/test/deleteSos")
    @ResponseBody
    public boolean deleteSos(@RequestParam(value="imei")  String imei,
    		@RequestParam(value="phone")  String phone) {  
		
		boolean result = assistantManager.deleteSosPhone(imei, phone);
		return result;
		
    }
	/**
	 * 删除语音提醒(测试用)
	 * @return
	 */
	@RequestMapping("/test/deleteVoiceRemind")
    @ResponseBody
    public boolean deleteVoiceRemind(@RequestParam(value="imei")  String imei,
    		@RequestParam(value="date")  String date) {  
		
		boolean result = assistantManager.deleteVoice(imei, DateUtils.strToDate("20"+date, DateUtils.datePatternStringWithHM));
		return result;
		
    }
	/**
	 * 下发语音以及留言(测试用)
	 * @param para
	 * @param imei
	 * @param time
	 * @param voiceNum
	 * @return
	 * @throws IOException
	 */
	@RequestMapping("/test/callSocket")
    @ResponseBody
    public String testCallSocket(@RequestParam(value="para",required=false)  String para
    		,@RequestParam(value="imei",required=false)  String imei
    		,@RequestParam(value="time",required=false)  String time,
    		@RequestParam(value="voiceNum",required=false)  String voiceNum) throws IOException {  
		String callPara = null;
		//if(i>12 )i=0;
		i=0;
		int allPackage = 6;
		if(para.startsWith("BP28")){
			assistantManager.setVoiceMessage(imei, voiceMap.get(voiceNum));
			return "请求成功 请稍后";
		}else if(para.startsWith("BP27")){
			callPara = "IWBP27,"+imei+",080835,1";
		} else if(para.startsWith("BP36")){
			AssistantVoice voice = new AssistantVoice();
			voice.setImei(imei);
			voice.setVoice(voiceMap.get(voiceNum));
			voice.setVoiceId(voiceNum);
			voice.setDate(DateUtils.strToDate(time, DateUtils.datePatternStringWithHM));
			assistantManager.setVoiceRemaind(voice);
			return "请求成功 请稍后";
		}if(para.startsWith("BP38")){
			int start = i*1024;
			
			int end = (i+1)*1024;
			callPara = "IWBP38,D3590D54,"+voiceNum+","+allPackage+","+(i+1)+",1024,"+voiceMap.get(voiceNum).substring(start,end);
			i++;
			/*String result = httpServer.callApi(callPara,imei);*/
			assistantSender.callApi(callPara,imei);
			//return "result:"+result+"~总共"+allPackage+"包，当前第"+i+"包";
			return "请求成功 请稍后";
		}else if(para.startsWith("BP37")){
			callPara = "IWBP37,080835";
		}
		String result = assistantSender.callApi(callPara,imei);
		return result;
    }
	/**
	 * 设置主控号码（服务中心电话）(测试用)
	 * @return
	 */
	@RequestMapping("/test/setServicePhone")
    @ResponseBody
    public boolean setServicePhone(@RequestParam(value="imei")  String imei,
    		@RequestParam(value="phone")  String phone) {  
		
		boolean result = assistantManager.setServicePhone(imei, phone);
		return result;
		
    }
    /**
	 * 设置白名单(测试用)
	 * @return
	 */
	@RequestMapping("/test/setWhiteList")
    @ResponseBody
    public boolean setWhiteList(@RequestParam(value="imei")  String imei,
    		@RequestParam(value="phone")  String phone) {  
		List<String> phones = new ArrayList<>();
		String[] phoneArray = phone.split(",");
		for (int i = 0; i < phoneArray.length; i++) {
			if(StringUtils.isNoneBlank(phoneArray[i])){
			phones.add(phoneArray[i]);
			}
		}
		boolean result = assistantManager.setWhiteList(imei, phones);
		return result;
		
    }
}
